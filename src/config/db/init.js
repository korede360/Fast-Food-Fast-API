import pg, { Client } from 'pg';

import dotenv from 'dotenv';

dotenv.load();

if (process.env.NODE_ENV == 'test' || process.env.NODE_ENV == 'development') {
  pg.defaults.ssl = false;
} else {
  pg.defaults.ssl = true;
}

const init = async DB_URI => {
  const userClient = new Client(DB_URI);
  await userClient.connect();
  const userQuery = await userClient.query(`
    CREATE TABLE IF NOT EXISTS users (
      id smallint GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
      name varchar(255) NOT NULL,
      email varchar(255) UNIQUE NOT NULL,
      password varchar(255) NOT NULL,
      created_at TIMESTAMP,
      updated_at TIMESTAMP
    );
  `);
  userQuery.rows.forEach(row => {
    console.log(row);
  });
  await userClient.end();

  const orderClient = new Client(DB_URI);
  await orderClient.connect();
  const orderQuery = await orderClient.query(`
    CREATE TABLE IF NOT EXISTS orders (
      id smallint GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
      user_id smallint,
      item varchar(255) NOT NULL,
      quantity smallint NOT NULL,
      status varchar(255) NOT NULL,
      created_at TIMESTAMP,
      updated_at TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
    );
  `);
  orderQuery.rows.forEach(row => {
    console.log(row);
  });
  await orderClient.end();

  const menuClient = new Client(DB_URI);
  await menuClient.connect();
  const menuQuery = await menuClient.query(`
    CREATE TABLE IF NOT EXISTS menu (
      id smallint GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
      name varchar(255) NOT NULL,
      description varchar(255) NOT NULL,
      image_url varchar(255) NOT NULL
    );
  `);
  menuQuery.rows.forEach(row => {
    console.log(row);
  });
  await menuClient.end();
}

export default init;